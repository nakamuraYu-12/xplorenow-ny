<div class="mt-3 event-main-container">
  <div class="index-map-container">
    <nav class="navbar navbar-light bg-light h-10" >
      <form class="d-flex" onsubmit="return false;">
        <input class="form-control me-1" type="search" id="searchAddress" placeholder="地域を検索" aria-label="Search" onkeydown="handleEnterKey(event)">
        <button class="btn btn-outline-success w-auto" id="searchAddressButton" type="button" onclick="handleAddressSearch()">Search</button>
      </form>
    </nav>
    <div id="map" class="img-thumbnail index-map"></div>
  </div>
  <div>
    <nav class="search-selecet-event-nav navbar navbar-light bg-light d-flex justify-content-between" id="events-nav">
      <div class="container-fluid">
        <form class="d-flex w-auto" onsubmit="return false;">
          <input class="form-control me-1" type="search" id="searchKeyword" placeholder="イベントを検索" aria-label="Search" onkeydown="handleEnterKey(event)">
          <button class="btn btn-outline-success w-auto" id="searchKeywordButton" type="button" onclick="handleCombinedFilterAndSearch()">Search</button>
          <button class="btn btn-outline-primary w-auto ms-1" id="searchTagButton" type="button" onclick="showTagModal()">TagSelect</button>
        </form>
        <div class="d-flex filter-sort-containre mt-1">
          <select id="filterSelect" class="event-form-selector form-select  me-1 fs-6" onchange="handleCombinedFilterAndSearch()">
            <option value="all">すべてのイベント</option>
            <option value="past">過去開催</option>
            <option value="current">本日開催</option>
            <option value="future">開催予定</option>
            <% if user_signed_in?%>
              <option value="bookmarked">ブックマーク済み</option>
            <% end %>
          </select>
          <select id="sortSelect" class="event-form-selector form-select froat-end fs-6" onchange="handleSortChange()">
            <option value="newest">最新投稿順</option>
            <option value="asc">開催日昇順</option>
            <option value="desc">開催日降順</option>
          </select>
        </div>
        <a class="btn btn-primary w-100 m-2 make-event-btn" href="/events/new"><strong>+</strong></a>
      </div>
    </nav>
    <div class="event-scroll d-flex flex-column align-items-center pt-3 px-3">
      <% @events.each do |event| %>
        <div class="card  px-2 py-1 clickable-card w-100 mb-2"
          data-event-id="<%= event.id %>"
          data-event-name="<%= event.name %>"
          data-event-address="<%= event.address%>"
          data-event-introduction="<%= event.introduction %>"
          data-event-lat="<%= event.latitude %>"
          data-event-lng="<%= event.longitude %>"
          <% selected_event = @event_dates.find { |ed| ed[:event_id] == event.id }%>
          <% selected_date = selected_event[:selected_date] %>
          data-event-day="<%= selected_date.event_day %>"
          data-event-start-time="<%= selected_date.start_time %>"
          data-event-end-time="<%= selected_date.end_time %>"
        >
          <div class="d-flex align-items-center justify-content-between card-header index-card-header mb-1">
            <% if event.user.present? && event.user.image.present? %>
              <%= link_to user_account_path(event.user_id) do %>
                <%= image_tag(event.user.image.url, class: "nav-account-img img-field rounded-circle") %>
                <strong class="text-primary"><%= event.user.name %></strong>
              <% end %>
            <% else %>
              <%= link_to user_account_path(event.user_id) do %>
                <%= image_tag('default-avatar.png', class: "nav-account-img img-field rounded-circle") %>
                <strong class="text-primary"><%= event.user.name %></strong>
              <% end %>
            <% end %>
            <div class="btn-field d-flex">
              <%= link_to "詳細", event, class: "detail-btn btn btn-primary" %>
              <% if user_signed_in? %>
                <% if current_user.event_bookmarked?(event) %>
                  <%= render 'bookmarks/unbookmark', event: event %>
                <% else %>
                  <%= render 'bookmarks/bookmark', event: event %>
                <% end %>
              <% end %>
            </div>
          </div>
          <div class="card-body event-card index-card-body">
            <h5 class="card-title event-title"><%= event.name %></h5>
            <div>
              <p class="card-text mb-1 event-address"><strong>住所:</strong> <%= event.address %></p>
              <p class="card-text mb-0"><strong>イベント日時:</strong></p>
              <ul class="list-group mb-1">
                <% event.event_dates.each do |date| %>
                  <li class="ps-2"><%= date.event_day.strftime('%Y-%m-%d') %> <%= date.start_time.strftime('%H:%M') %>〜<%= date.end_time.strftime('%H:%M') %></li>
                <% end %>
              </ul>
              <div class="d-flex justify-content-end event-tags">
                <% event.tags.each do |tag| %>
                  <a class="badge text-bg-primary ms-1 event-tag tag-list-item">#<%= tag.name %></a>
                <% end %>
              </div>
              <p class="event-past-message text-danger ps-1">※開催済みのイベントです</p>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>
<!-- タグ一覧モーダル -->
<div class="modal fade" id="tagModal" tabindex="-1" role="dialog" aria-labelledby="tagModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="tagModalLabel">タグ一覧</h5>
        <button type="button" class="close btn btn-danger close-btn" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body d-flex flex-wrap">
          <% @all_tags.each do |tag| %>
            <a class="tag-list-item badge text-bg-primary ms-1">#<%=tag.name%></a>
          <% end %>
      </div>
    </div>
  </div>
</div>

<style>
  #map {
    width: 100%;
    height: 600px;
  }
  @media (max-width: 1024px) {
    #map {
    width: 100%;
    height: 550px !important;
  }

  @media (max-width: 768px) {
    #map {
      width: auto;
      height: 250px !important;
    }
  }
  @media(max-width:1440px){
  #map {
      width: 100%;
      height: 600px;
    }
}
</style>
<script>
  let map;let markers = [];
  const screenSize = window.innerWidth;
  const currentDateTime = new Date();
  const tagList = document.querySelectorAll(".tag-list-item");

document.addEventListener("turbolinks:load", function() {
  updateEventMessages();
  initMap();
  tagList.forEach(function (tag) {
    tag.addEventListener("click", function () {
      handleTagClick(tag);
    });
  });
});

function updateEventMessages() {
  const clickableCards = document.querySelectorAll(".clickable-card");

  clickableCards.forEach(function(card){
    const pastEventMessage = card.querySelector(".event-past-message");
    const pastEventBtn = card.querySelector(".detail-btn");
    const eventDate = new Date(card.getAttribute("data-event-day"));
    const startTime = new Date(card.getAttribute("data-event-start-time"));
    const endTime = new Date(card.getAttribute("data-event-end-time"));

    if(pastEvent(eventDate, currentDateTime, endTime)){
      pastEventBtn.classList.add("btn-outline-primary");
      pastEventBtn.classList.remove("btn-primary");
      card.classList.add("text-muted");
      pastEventMessage.classList.add("visible");
    } else {
      pastEventMessage.classList.add("invisible");
    }
  });
}

// Googleマップを初期化する
function initMap() {
  const mapElement = document.getElementById('map');
  const clickableCards = document.querySelectorAll(".clickable-card");


  if (clickableCards.length === 0) {
    const defaultLat = 35.681236;
    const defaultLng = 139.767125;

    map = new google.maps.Map(mapElement, {
      center: { lat: defaultLat, lng: defaultLng },
      zoom: 10,
    });
  } else {
    const latestCard = clickableCards[0];
    const latestEventLat = parseFloat(latestCard.getAttribute("data-event-lat"));
    const latestEventLng = parseFloat(latestCard.getAttribute("data-event-lng"));

    map = new google.maps.Map(mapElement, {
      center: { lat: latestEventLat, lng: latestEventLng },
      zoom: 15,
    });

    clickableCards.forEach(function (card, index) {
      const eventLat = parseFloat(card.getAttribute("data-event-lat"));
      const eventLng = parseFloat(card.getAttribute("data-event-lng"));
      const eventId = card.getAttribute("data-event-id");
      const eventMarker = new google.maps.Marker({
        position: { lat: eventLat, lng: eventLng },
        map: map,
        eventId: eventId,
      });

      markers.push(eventMarker);

      card.addEventListener("click", function () {
        handleCardClick(card, eventMarker, eventLat, eventLng);
      });

      eventMarker.addListener("click", function () {
        handleMarkerClick(card);
      });
    });

    latestCard.classList.add("border-primary");
  }
}

// カードがクリックされた時の動作
function handleCardClick(card, marker, lat, lng) {
  const activeCard = document.querySelector(".card.border-primary");
  if (activeCard) {
    activeCard.classList.remove("border-primary");
  }

  card.classList.add("border-primary");
  if (window.matchMedia("(max-width: 768px)").matches) {
    card.scrollIntoView({ behavior: "smooth", block: "end" });
  } else {
    card.scrollIntoView({ behavior: "smooth", block: "center" });
  }

  markers.forEach(function (m) {
    m.setAnimation(null);
  });

  marker.setAnimation(google.maps.Animation.BOUNCE);
  setTimeout(function () {
    marker.setAnimation(null);
  }, 1500);

  map.panTo({ lat: lat, lng: lng });
}

// マーカーがクリックされた時の動作
function handleMarkerClick(card) {
  const activeCard = document.querySelector(".card.border-primary");
  if (activeCard) {
    activeCard.classList.remove("border-primary");
  }

  card.classList.add("border-primary");
  if (window.matchMedia("(max-width: 768px)").matches) {
    card.scrollIntoView({ behavior: "smooth", block: "end" });
  } else {
    card.scrollIntoView({ behavior: "smooth", block: "center" });
  }
}

// ソートの変更に対応する処理
function handleSortChange() {
  const selectedSort = document.getElementById("sortSelect").value;
  const eventCardsContainer = document.querySelector(".event-scroll");
  const eventCards = Array.from(eventCardsContainer.querySelectorAll(".clickable-card"));

  if (selectedSort === "asc") {
    eventCards.sort((a, b) => {
      const aDate = new Date(a.getAttribute("data-event-day"));
      const bDate = new Date(b.getAttribute("data-event-day"));
      return aDate - bDate;
    });
  } else if (selectedSort === "desc") {
    eventCards.sort((a, b) => {
      const aDate = new Date(a.getAttribute("data-event-day"));
      const bDate = new Date(b.getAttribute("data-event-day"));
      return bDate - aDate;
    });
  } else if (selectedSort === "newest") {
    eventCards.sort((a, b) => {
      const aCreateDate = new Date(a.getAttribute("data-create-day"));
      const bCreateDate = new Date(b.getAttribute("data-create-day"));
      return bCreateDate - aCreateDate;
    });
  }

  eventCards.forEach(card => eventCardsContainer.appendChild(card));
}

// エンターキーに対応する処理
function handleEnterKey(event) {
  if (event.key === "Enter") {
    const searchAddressInput = document.getElementById("searchAddress");
    const searchKeywordInput = document.getElementById("searchKeyword");

    if (document.activeElement === searchAddressInput) {
      handleAddressSearch();
    } else if (document.activeElement === searchKeywordInput) {
      handleCombinedFilterAndSearch();
    }
  }
}

// キーワード検索とフィルターの組み合わせに対応する処理
function handleCombinedFilterAndSearch() {
  const searchKeyword = document.getElementById("searchKeyword").value.toLowerCase();
  const selectedFilter = document.getElementById("filterSelect").value;
  const eventCards = document.querySelectorAll(".clickable-card");
  const bookmarkedEventIds = <%= raw @bookmark_events.pluck(:event_id).to_json %>;

  markers.forEach(marker => marker.setMap(null));

  eventCards.forEach(function (card) {
    const eventName = card.getAttribute("data-event-name").toLowerCase();
    const eventAddress = card.getAttribute("data-event-address").toLowerCase();
    const eventIntroduction = card.getAttribute("data-event-introduction").toLowerCase();
    const eventDate = new Date(card.getAttribute("data-event-day"));
    const startTime = new Date(card.getAttribute("data-event-start-time"));
    const endTime = new Date(card.getAttribute("data-event-end-time"));
    const eventId = card.getAttribute("data-event-id");
    const isBookmarked = bookmarkedEventIds.includes(Number(eventId));
    const tagElements = card.querySelectorAll(".event-tag");
    const tags = Array.from(tagElements).map(tag => tag.textContent.toLowerCase());

    const tagSearchMatch = tags.some(tag => tag.includes(searchKeyword));
    const shouldDisplay = (
      (eventName.includes(searchKeyword) || eventAddress.includes(searchKeyword) || eventIntroduction.includes(searchKeyword) || tagSearchMatch) &&
      (selectedFilter === "all" ||
      (selectedFilter === "current" && currentEvent(eventDate, currentDateTime, endTime)) ||
      (selectedFilter === "past" && pastEvent(eventDate, currentDateTime, endTime)) ||
      (selectedFilter === "future" && featureEvent(eventDate, currentDateTime, endTime)) ||
      (selectedFilter === "bookmarked" && isBookmarked))
    );

    const marker = markers.find(m => m.eventId === card.getAttribute("data-event-id"));
    if (shouldDisplay) {
      card.style.display = "block";
      const marker = markers.find(m => m.eventId === eventId);
      marker.setMap(map);
    } else {
      card.style.display = "none";
    }
  });
}

// 現在のイベントかどうかを判定する関数
function currentEvent(eventDate, currentDateTime, endTime) {
  return isSameDay(eventDate, currentDateTime) && isTimeFuture(endTime, currentDateTime);
}

// 過去のイベントかどうかを判定する関数
function pastEvent(eventDate, currentDateTime, endTime) {
  return eventDate < currentDateTime || isSameDay(eventDate, currentDateTime) && isTimePast(endTime, currentDateTime);
}

// 未来のイベントかどうかを判定する関数
function featureEvent(eventDate, currentDateTime, endTime) {
  return eventDate > currentDateTime || isSameDay(eventDate, currentDateTime) && isTimeFuture(endTime, currentDateTime);
}

// 同じ日付かどうかを比較する関数
function isSameDay(date1, date2) {
  return (
    date1.getFullYear() === date2.getFullYear() &&
    date1.getMonth() === date2.getMonth() &&
    date1.getDate() === date2.getDate()
  );
}

// 時間が過去かどうかを比較する関数
function isTimePast(time1, time2) {
  return time1.getHours() < time2.getHours() || (time1.getHours() === time2.getHours() && time1.getMinutes() < time2.getMinutes());
}

// 時間が未来かどうかを比較する関数
function isTimeFuture(time1, time2) {
  return time1.getHours() > time2.getHours() || (time1.getHours() === time2.getHours() && time1.getMinutes() > time2.getMinutes());
}

// 地域検索に対応する処理
function handleAddressSearch() {
  const searchAddress = document.getElementById("searchAddress").value;
  if (searchAddress) {
    const geocoder = new google.maps.Geocoder();
    geocoder.geocode({ address: searchAddress }, function (results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        const location = results[0].geometry.location;
        map.setCenter(location);
      } else {
        alert("住所を見つけることができませんでした。");
      }
    });
  }
}
// タグ検索ボタン押下時にモーダル表示
function showTagModal() {
  const tagModal = new bootstrap.Modal(document.getElementById("tagModal"));
  tagModal.show();
}

function handleTagClick(tag) {
  const tagText = tag.innerText.trim();
  const searchKeywordInput = document.getElementById("searchKeyword");
  searchKeywordInput.value = tagText;
  const tagModal = new bootstrap.Modal(document.getElementById("tagModal"));
  const closeButton = document.querySelector(".close-btn");
  closeButton.click();
  handleCombinedFilterAndSearch();
}

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&libraries=places&callback=initMap"></script>
